/* sfft_block_headers.h - Blocked + Padded FFT
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 03/01/2011
 * Last Modified    : 08/15/2012
 * 
 */

#pragma once
#ifndef _sfft_block_headers_H
#define _sfft_block_headers_H
#include "../Globals.h"
#include "../Profiles.h"
#include "../Debuggers.h"
#include "../sfft_padding.h"
#include "../Tables/sfft_cb_tables_M_headers.h"
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Point Block Object
typedef struct sfft_cb_tables sfft_cb_tables;
typedef struct{
    //  Size of the block in vectors.
    i_ptr vsize;

    //  Transform length of the block.
    int m;
    int k;

    //  End-point Function pointers
    void (*fp_forward)(const sfft_cb_tables *tw,f_vector *I,f_vector *O);
    void (*fp_inverse)(const sfft_cb_tables *tw,f_vector *I,f_vector *O);

    //  Padding
    sfft_padding pad;
} sfft_block;
typedef struct{
    const sfft_block *pb;
    int k;
} sfft_plan;
#include "sfft_pb_core_headers.h"
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Point Block Methods
i_ptr   sfft_cb_pb_size         (const sfft_block *pb,int k);
//void    sfft_pb_
void    sfft_cb_pb_rand         (const sfft_block *pb,f_vector *T,i_ptr L);
void    sfft_cb_pb_print        (const sfft_block *pb,const f_vector *T,i_ptr L);
void    sfft_cb_pb_sqr          (const sfft_block *pb,f_vector *T,i_ptr L);
void    sfft_cb_pb_scale        (const sfft_block *pb,f_vector *T,i_ptr L,f_word scale);
f_word  sfft_cb_pb_residual     (const sfft_block *pb,f_vector *T,i_ptr L);
void    sfft_cb_pb_forward_1    (const sfft_block *pb,const sfft_cb_tables *tw,f_vector *T);
void    sfft_cb_pb_inverse_1    (const sfft_block *pb,const sfft_cb_tables *tw,f_vector *T);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  FFTs
void    sfft_cb_pb_forward      (const sfft_block *pb,const sfft_cb_tables *tw,int k,f_vector *T);
void    sfft_cb_pb_inverse      (const sfft_block *pb,const sfft_cb_tables *tw,int k,f_vector *T);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif
