/* sfft_padding.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 03/01/2011
 * Last Modified    : 04/13/2012
 * 
 */

#pragma once
#ifndef _sfft_padding_H
#define _sfft_padding_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
typedef struct{
    //  Size between adjacent points (before padding)
    i_ptr block;

    //  Level 1
    int k1;         //  Pad every 2^k1 points.
    i_ptr p1;       //  Pad p1 words.

//    //  Level 2
//    int k2;         //  Pad every 2^k2 points.
//    i_ptr p2;       //  Pad p2 words.
} sfft_padding;
//inline  static  void    sfft_padding_init    (sfft_padding *pad,i_ptr block);
inline  static  i_ptr   sfft_padding_get     (const sfft_padding *pad,i_ptr index);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Inlines
//inline static void sfft_padding_init(sfft_padding *pad,i_ptr block){
//    pad->block = block;
//    pad->k1 = 2;
//    pad->p1 = 3;
////    pad->k2 = 12;
////    pad->p2 = 7;
//}
inline static i_ptr sfft_padding_get(const sfft_padding *pad,i_ptr index){
    i_ptr offset = pad->block * index;
    offset += (index >> pad->k1) * pad->p1;     //  Level 1
//    offset += (index >> pad->k2) * pad->p2;     //  Level 2
    return offset;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif
