/* DataTypes.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 09/04/2010
 * Last Modified    : 09/04/2010
 * 
 * 
 * 
 *      This file contains the type-definitions of all the different modes.
 */

#pragma once
#ifndef _sfft_DataTypes_H
#define _sfft_DataTypes_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Padding
typedef struct{
    //  Size between adjacent points (before padding)
    i_ptr block;

    //  Level 1
    int k1;         //  Pad every 2^k1 points.
    i_ptr p1;       //  Pad p1 words.

    //  Level 2
    int k2;         //  Pad every 2^k2 points.
    i_ptr p2;       //  Pad p2 words.
} sfft_padding;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Twiddle Tables
typedef struct{
    f_vector *P;        //  Pointer the table
    f_vector *w[100];   //  Pointer to each sub-table
    i_ptr k;            //  Size of the table.

    //  The maximum 1D transform that can be done using a size k table is 2^k points.
} sfft_table;
typedef struct{
    sfft_table w1;
    sfft_table w2;
    sfft_table w3;
} sfft_tables;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Point Block
typedef struct{
    //  Size of the block in vectors.
    i_ptr vsize;

    //  Transform length of the block.
    int k;

    //  Padding
    sfft_padding pad;
} sfft_block;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif
