/* sfft_padding.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 03/01/2011
 * Last Modified    : 03/01/2011
 * 
 */

#pragma once
#ifndef _sfft_padding_H
#define _sfft_padding_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline  void    sfft_padding_init    (sfft_padding *pad,i_ptr block);
inline  i_ptr   sfft_padding_get     (const sfft_padding *pad,i_ptr index);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Implementations
inline void sfft_padding_init(sfft_padding *pad,i_ptr block){
    pad->block = block;
    pad->k1 = 2;
    pad->p1 = 3;
    pad->k2 = 12;
    pad->p2 = 7;
}
inline i_ptr sfft_padding_get(const sfft_padding *pad,i_ptr index){
    i_ptr offset = pad->block * index;
    offset += (index >> pad->k1) * pad->p1;     //  Level 1
    offset += (index >> pad->k2) * pad->p2;     //  Level 2
    return offset;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif
