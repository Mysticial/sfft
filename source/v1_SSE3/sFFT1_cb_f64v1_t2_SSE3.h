/* sfft_cb_f64v1_t2_SSE3.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 09/12/2010
 * Last Modified    : 09/12/2010
 * 
 * 
 * 
 *      cb      =   Complex Bit-reversed Transform
 *      f64v1   =   64-bit floating point (vectorize by 2)
 *      t2      =   2-point transform
 * 
 */

#pragma once
#ifndef _sfft_cb_f64v1_t2_SSE3_H
#define _sfft_cb_f64v1_t2_SSE3_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#define sfft_cb_f64v1_t2_SSE3(T){ \
    register f_vector _r0,_r1,_r2;  \
    \
    _r0 = ((const f_vector*)(T))[0];    \
    _r1 = ((const f_vector*)(T))[1];    \
    \
    _r2 = fv_hadd(_r0,_r1); \
    _r0 = fv_hsub(_r0,_r1); \
    \
    _r1 = fv_unpacklo(_r2,_r0); \
    _r2 = fv_unpackhi(_r2,_r0); \
    \
    ((f_vector*)(T))[0] = _r1;  \
    ((f_vector*)(T))[1] = _r2;  \
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif
